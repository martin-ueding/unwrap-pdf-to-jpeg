#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2012-2013 Martin Ueding <dev@martin-ueding.de>

"""
unwrap PDF into JPEG files
==========================

This converts a PDF file into the JPEG files it was made out of initially and
numbers them with a ``+1``, ``+2``, ... scheme.

Basically, it is just a simple wrapper for ``pdfimages -j`` since I do not like
its numbering scheme.

usage
-----

Call with multiple files::

    unwrap-pdf-to-jpeg file.pdf other.pdf third.pdf

And you will end up with::

    file+1.jpg
    file+2.jpg
    file+3.jpg
    ...
    file+8.jpg

    other+01.jpg
    ...
    other+87.jpg

    third+1.jpg
    third+2.jpg
"""

import glob
import optparse
import os
import shutil
import subprocess
import uuid

__docformat__ = "restructuredtext en"

def main():
    options, args = _parse_args()

    for infile in args:
        ident = str(uuid.uuid4())

        status = subprocess.call(["pdfimages", "-j", infile, ident])
        print("Status", status)

        if status != 0:
            continue

        files = sorted(glob.glob(ident+"-*"))
        print("Files", files)
        count = len(files)
        print("Count", count)
        digits = len(str(count))
        print("Digits", digits)

        success = True

        for i, f in zip(range(1, count+1), files):
            if not f.endswith(".jpg"):
                print("No JPEG generated, deleting ...")
                os.remove(f)
                success = False
            else:
                formatter = "%0"+str(digits)+"d"
                new_name = infile[:-4]+"+"+(formatter % i)+".jpg"
                print("->", f, new_name)
                os.rename(f, new_name)

        if success:
            trashfile = os.path.expanduser("~/.local/share/Trash/files/")
            print("Trashfile", trashfile)
            shutil.move(infile, trashfile)

def _parse_args():
    """
    Parses the command line arguments.

    :return: Tuple with options and (positional) arguments.
    :rtype: tuple
    """
    parser = optparse.OptionParser(usage="", description="")

    return parser.parse_args()

if __name__ == "__main__":
    main()
