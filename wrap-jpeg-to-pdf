#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright © 2012 Martin Ueding <dev@martin-ueding.de>

# License (BSD-3-clause)
# ======================
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# - Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# - Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# - Neither the name of the Martin Ueding nor the names of his contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""
Goes through the directory structure, searches for multiple JPEG images which
are named with the ``+1``, ``+2``, … scheme and uses ``convert`` to create a
PDF with all the images in correct order.
"""

import argparse
import os.path
import re
import shutil
import subprocess

__docformat__ = "restructuredtext en"

srcdir = os.path.expanduser("~/PDF_Source")

def create_srcdir():
    if not os.path.isdir(srcdir):
        os.mkdir(srcdir)

def main():
    options = _parse_args()

    plus_pattern = re.compile(r"([^+]+)(\+\d+)(\.jpg)")

    for root, dirs, files in os.walk("."):
        jpegs = {}
        for file in files:
            m = plus_pattern.match(file)
            if m is None:
                continue

            prefix = (root, m.group(1))
            suffix = (m.group(2), m.group(3))
            if not prefix in jpegs:
                jpegs[prefix] = []

            jpegs[prefix].append(suffix)

        for key in jpegs:
            jpegs[key].sort()

        if len(jpegs) > 0:
            for prefix in jpegs:
                images = []
                for suffix in jpegs[prefix]:
                    images.append(os.path.join(prefix[0], prefix[1]+suffix[0]+suffix[1]))

                pdf_file = os.path.join(prefix[0], prefix[1]+".pdf")

                call = ["convert"]+images+[pdf_file]
                print(' '.join(call))
                subprocess.check_call(call)

                create_srcdir()

                for image in images:
                    shutil.move(image, os.path.join(srcdir, os.path.basename(image)))

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(usage="", description="")
    parser.add_argument('args', metavar='N', type=str, nargs='*',
                   help='Positional arguments.')
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument('--version', action='version', version='<the version>')

    return parser.parse_args()

if __name__ == "__main__":
    main()
