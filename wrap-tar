#!/usr/bin/python3
# -*- coding: utf-8 -*-

# Copyright Â© 2012 Martin Ueding <dev@martin-ueding.de>

# License (BSD-3-clause)
# ======================
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# - Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the following disclaimer.
#
# - Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
#
# - Neither the name of the Martin Ueding nor the names of his contributors
#   may be used to endorse or promote products derived from this software
#   without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""
Wraps the groups of pictures into tar archives so that there are not so many
files laying around.
"""

import argparse
import os
import re
import subprocess
import sys

__docformat__ = "restructuredtext en"

def main():
    options = _parse_args()

    plus_pattern = re.compile(r"([^+]+)(\+\d+.+)")

    for root, dirs, files in os.walk(os.path.expanduser("~/PDF_Source")):
        jpegs = {}
        for file in files:
            m = plus_pattern.match(file)
            if m is None:
                continue

            prefix = (root, m.group(1))
            suffix = m.group(2)
            if not prefix in jpegs:
                jpegs[prefix] = []

            jpegs[prefix].append(suffix)

        for key in jpegs:
            jpegs[key].sort()

        if len(jpegs) > 0:
            for prefix in jpegs:
                images = []
                for suffix in jpegs[prefix]:
                    images.append(os.path.join(prefix[1]+suffix))

                tar_file = os.path.join(prefix[0], prefix[1]+".tar.gz")

                call = ["tar", "-C", prefix[0], "-czf", tar_file]+images
                print(' '.join(call))
                try:
                    subprocess.check_call(call)
                except subprocess.CalledProcessError as e:
                    print(e)
                else:
                    if os.path.isfile(tar_file):
                        for j in images:
                            print("Removing", j)
                            os.remove(os.path.join(prefix[0], j))
                    else:
                        print("There is no", tar_file)
                        sys.exit(1)

def _parse_args():
    """
    Parses the command line arguments.

    :return: Namespace with arguments.
    :rtype: Namespace
    """
    parser = argparse.ArgumentParser(description="")
    #parser.add_argument("args", metavar="N", type=str, nargs="*", help="Positional arguments.")
    #parser.add_argument("", dest="", type="", default=, help=)
    #parser.add_argument("--version", action="version", version="<the version>")

    return parser.parse_args()


if __name__ == "__main__":
    main()
